import sys
import os

# Add project root to sys.path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from src.rag.document_chunker import DocumentChunker
from src.rag.embedder import HybridIndexer
from src.rag.agent import ConversationalRetrievalAgent, ChatState
from config import CLEANED_DATA_DIR, CHROMA_DB_DIR, BM25_DIR
from langchain_core.runnables import RunnableConfig

from langchain.tools import Tool
from langchain.agents import initialize_agent, AgentType
from langdetect import detect
# docs = DocumentChunker(CLEANED_DATA_DIR)
# docs.load_documents()
# docs.split_documents()
def test_agent(config: RunnableConfig):
    
    indexer = HybridIndexer(persist_directory=CHROMA_DB_DIR, bm25_directory=BM25_DIR)
    indexer.create()

    agent = ConversationalRetrievalAgent(indexer, temperature=0.7)

    return agent.app

if __name__ == "__main__":
    # docs = DocumentChunker(CLEANED_DATA_DIR)
    # docs.load_documents()
    # docs.split_documents()

    indexer = HybridIndexer(persist_directory=CHROMA_DB_DIR, bm25_directory=BM25_DIR)
    indexer.create()
    
    agent = ConversationalRetrievalAgent(indexer=indexer)
    # init_state: ChatState = {
    #         "query": "vinpearl land ở đâu vậy",
    #         "language": 'vi',
    #         "context": "",
    #         "history": "",
    #         "response": "",
    #         "intent": "",
    #         "error": ""
    #     }
    # state = agent.classify_intent(init_state)

    # print(f"Intent: {state['intent']}")
    
    # Generated by Copilot
    

    retrieve_tool = Tool(
        name="retrieve",
        func=lambda query: agent._retrieve(query, detect(query)),
        description="Retrieve travel information from the Nha Trang knowledge base."
    )

    search_tool = Tool(
        name="search",
        func=lambda query: agent._web_search(query, detect(query)),
        description="Search the web for real-time or recent information about Nha Trang."
    )

    location_tool = Tool(
        name="location",
        func=lambda query: agent._get_location_map(query, detect(query)),
        description="Get the address, map, or location of a place or category of places in Nha Trang."
    )
    tools = [retrieve_tool, search_tool, location_tool]
    
    

    route_agent = initialize_agent(
        tools=tools,
        llm=agent.llm_router,  # or your preferred LLM
        agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,  # or another agent type
        # agent_kwargs={"language": "vi"},
        verbose=True,
        memory=agent.memory
    )

    response = route_agent.invoke({"input": "các quán ăn ngon tại nha trang"})
    print(response)

    # k_docs = indexer.hybrid_search("địa điểm vui chơi", k=5, score_threshold=0.3)
    # print(k_docs)